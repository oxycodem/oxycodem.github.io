class Point:
    def __init__(self, n, x, y):
        self.n = n
        self.x = x
        self.y = y

    def get_x(self):
        return self.x

    def get_y(self):
        return self.y

    def __str__(self):
        return f"{self.n}({self.x}, {self.y})"

    def __repr__(self):
        return f"Point('{self.n}', {self.x}, {self.y})"

    def __eq__(self, o):
        if not isinstance(o, Point):
            return NotImplemented
        return (self.n, self.x, self.y) == (o.n, o.x, o.y)

    def __ne__(self, o):
        eq = self.__eq__(o)
        if eq is NotImplemented:
            return NotImplemented
        return not eq

    def __lt__(self, o):
        if not isinstance(o, Point):
            return NotImplemented
        return (self.n, self.x, self.y) < (o.n, o.x, o.y)

    def __le__(self, o):
        lt = self.__lt__(o)
        eq = self.__eq__(o)
        if lt is NotImplemented or eq is NotImplemented:
            return NotImplemented
        return lt or eq

    def __gt__(self, o):
        le = self.__le__(o)
        if le is NotImplemented:
            return NotImplemented
        return not le

    def __ge__(self, o):
        lt = self.__lt__(o)
        if lt is NotImplemented:
            return NotImplemented
        return not lt

    def __hash__(self):
        return hash((self.n, self.x, self.y))
